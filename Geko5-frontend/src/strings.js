import LocalizedStrings from 'react-localization';
import { enUS, itIT } from '@mui/x-data-grid'
import { Description } from '@mui/icons-material';
import { create } from 'lodash';

export const strings = new LocalizedStrings({
	en:{
		all : 'All',
		Actions: "Actions",
		ActivationTime: "Activation time",
		activated: "Activated",
		active: "Active",
		activeTimeStamp: "Active Timestamp",
		activeValue: "Active value",
		add: "Add",
		ads : "Ads",
		addNew: "Add new",
		addNewDataLogger: "+ New data logger",
		addNewDeviceInterface: "New device interface",
		addNewDevices: "+ New device",
		addNewDevicesModbus: "+ New Device Modbus",
		addNewDevicesType: "+ New device model",
		addNewUser: "+ New user",
		admin: "Admin",
		alarmConfiguration: "Alarm configuration",
		alarmConfigurations: "Alarm configurations",
		alarmlist: "Alarm list",
		alarms: "Alarms",
		alarmsManagement: "Alarms management",
		apply: "Apply",
		applyChange: "Apply Change",
		applyTheConfiguration: "Apply the configuration",
		asset: "Asset",
		assetCategories: "Asset Categories",
		assetCategory: "Asset Category",
		assetcategories: "Asset categories",
		Asset_management: "Asset management",
		associatedAlarm: "Associated alarms",
		associationAlarm: "Alarms association",
		back: "Back",
		bit: 'Bit',
		bitMask : 'Bitmask',
		byteOrder: "Byte Order",
		cancel: "Cancel",
		changeAll: "Change all",
		changePassword: "Change Password",
		changeSettings: "Change Settings",
		choose: "Choose",
		close: "Close",
		comparisonOperators: "Comparison operators",
		confirm: "Confirm",
		confirmPassword: "Confirm New Password",
		connected: "Connected",
		create: "Create",
		createAlarm: "+ New Alarm",
		createalarm: "Create alarm",
		currentPassword: "Current Password",
		duplicateEnumeration : "There cannot be multiple rows with the same value in the 'value' field.", 
		dataLogger: "Data logger",
		dataLoggers: "Data loggers",
		datalogger: "data logger",
		deactive: "Deactive",
		deactiveTimestamp: "Deactive Timestamp",
		deactivationTime: "Deactivation time",
		delete: "Delete",
		deleteAll: "Delete all",
		deleteConfirm: "Do you want delete the selected item?",
		description: "Description",
		device: "device",
		Device: "Device",
		deviceInterface: "Device interface",
		deviceInterfaces: "Device interfaces",
		deviceModbus: "Device Modbus",
		deviceModel: "Device model",
		deviceModels: "Device models",
		deviceType: "Device Type",
		deviceinterface: "device interface",
		devicemodel: "device model",
		devices: "Devices",
		diff: "Diff",
		disable: "Disabled",
		disabled: "Disabled",
		discard: "Discard",
		disconnected: "Disconnected",
		displayOnGraph: "Display on Graph",
		digital : 'Digital',
		download: "Download",
		edit: "Edit",
		enumeration : 'Enumeration',
		editAlarm: "Edit alarm",
		editCpu: "Edit data logger",
		editDevice: "Edit device",
		editDeviceInterface: "Edit device interface",
		editDeviceType: "Edit device model",
		editProfile: "Edit Profile",
		editSignal: "Edit signal",
		editUser: "Edit User",
		email: "Email",
		enable: "Enabled",
		event : 'Event',
		export: "Export",
		fault : 'Fault',
		filters: "Filters",
		firmwareRev: "FirmwareRev",
		gain: "Gain",
		gateway: "Gateway",
		historicalAlarm: "Historical alarms",
		HistoricalData: "Historical data",
		host: "Host",
		import: "Import",
		importFile: "Import file",
		import_export: "Import/Export",
		inactive: "Inactive",
		infoDeviceModel: "Info device model",
		information : 'Information',
		infoDataLogger : 'Info data logger',
		infoPostFunction : 'If the postFunction is not used, the acquired value is first multiplied by the gain parameter and then the diff parameter is subtracted. However, if the postFunction is used, the gain and diff parameters are no longer considered in the value calculation, as value will directly take the acquired value. In this case, it is necessary to specify gain and diff within the postFunction. For example: return (value - diff) * gain;           In this example, the value is first subtracted by the diff parameter and then multiplied by gain.',
		location: "Location",
		login: "Login",
		logout: "Logout",
		manufacturer: "Manufacturer",
		measureUnit: "Measure unit",
		message: "Message",
		modbus: "Modbus",
		modbusAccess: "Modbus access",
		modbusAddress: "Modbus address",
		modbusFunction: "Modbus function",
		modbusType: "Modbus type",
		model: "Model",
		mqtt: "Mqtt",
		measure : 'Measure',
		name: "Name",
		new: "New",
		noDescription : 'Description not defined',
		newOptionDataLogger: "Add a new data logger",
		newOptionDeviceInterface: "Add a new device interface",
		newOptionDeviceModbus: "Add a new Device modbus",
		newOptionDeviceType: "Add a new device model",
		newPassword: "New Password",
		newStructures: "+ New signal",
		newdataLogger: "New data logger",
		notDefined: "Not defined",
		notShow: "Not show",
		ok: "Ok",
		onValue : 'onValue',
		operator: "Operator",
		password: "Password",
		passwordLenghtError: "Password must be at least 8 characters long.",
		passwordNotMatch: "Passwords do not match.",
		pollingPeriod: "Polling Period",
		port: "Port",
		postFunction: "Post function",
		previousValue: "Previous value",
		priority: "Priority",
		profile: "Profile",
		protocol: "Protocol",
		realTimedata: "Real time data",
		reload: "Reload",
		remove: "Remove",
		requiredFields: "Fill in all fields with an asterisk (*).",
		requiredNested: "You cannot configure a nested condition until the main condition is completed.",
		restore : 'Restore',
		role: "Role",
		requireEvent : 'You need to complete the',
		save: "Save",
		seconds: "Seconds",
		settings: "Settings",
		settingsSignal: "Manage signals to display",
		severity: "Severity",
		show: "Show",
		Signal: "Signal",
		signalType : 'Signal type',
		signal: "signal",
		signals: "Signals",
		signOut: "Sign out",
		status: "Status",
		service : 'Service',
		status200: "The changes have been applied successfully.",
		status200Operation: "Operation completed successfully.",
		status400: "Internet connection unavailable. Please check your connection and reload the page.",
		status401: "Incorrect username or password. Please try again.",
		store_forward: "Store & forward",
		supervisor: "Supervisor",
		system: "System",
		total: "Total",
		type: "Type",
		typeImportMissing : 'It is necessary to indicate the type of import ',
		typeImport : 'Type of import',
		unitId: "Unit Id",
		user: "Users",
		username: "Username",
		value: "Value",
		viewMore: "View more...",
		wordOrder: "Word Order",
		warning : 'Warning'
	  }
})


// .setLanguage('en');

// export const getDataGridLocale = () => {
// 	let locale
// 	switch (strings.getLanguage()) {
// 		case 'en':
// 			locale = enUS.components.MuiDataGrid.defaultProps.localeText
// 			break
	
// 		default:
// 			locale = enUS.components.MuiDataGrid.defaultProps.localeText
// 	}

// 	return locale
// }
